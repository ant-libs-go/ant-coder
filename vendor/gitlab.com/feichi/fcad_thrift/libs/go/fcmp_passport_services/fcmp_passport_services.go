// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package fcmp_passport_services

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"gitlab.com/feichi/fcad_thrift/libs/go/common"
	"gitlab.com/feichi/fcad_thrift/libs/go/fcmp_passport_types"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = fcmp_passport_types.GoUnusedProtection__
// Attributes:
//  - Header
//  - Body
type GetMediaByAppidRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body string `thrift:"body,2" db:"body" json:"body"`
}

func NewGetMediaByAppidRequest() *GetMediaByAppidRequest {
  return &GetMediaByAppidRequest{}
}

var GetMediaByAppidRequest_Header_DEFAULT *common.Header
func (p *GetMediaByAppidRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetMediaByAppidRequest_Header_DEFAULT
  }
return p.Header
}

func (p *GetMediaByAppidRequest) GetBody() string {
  return p.Body
}
func (p *GetMediaByAppidRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetMediaByAppidRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetMediaByAppidRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetMediaByAppidRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *GetMediaByAppidRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMediaByAppidRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetMediaByAppidRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetMediaByAppidRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteString(string(p.Body)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.body (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetMediaByAppidRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMediaByAppidRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetMediaByAppidResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *fcmp_passport_types.Media `thrift:"body,2" db:"body" json:"body"`
}

func NewGetMediaByAppidResponse() *GetMediaByAppidResponse {
  return &GetMediaByAppidResponse{}
}

var GetMediaByAppidResponse_Header_DEFAULT *common.Header
func (p *GetMediaByAppidResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetMediaByAppidResponse_Header_DEFAULT
  }
return p.Header
}
var GetMediaByAppidResponse_Body_DEFAULT *fcmp_passport_types.Media
func (p *GetMediaByAppidResponse) GetBody() *fcmp_passport_types.Media {
  if !p.IsSetBody() {
    return GetMediaByAppidResponse_Body_DEFAULT
  }
return p.Body
}
func (p *GetMediaByAppidResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetMediaByAppidResponse) IsSetBody() bool {
  return p.Body != nil
}

func (p *GetMediaByAppidResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetMediaByAppidResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetMediaByAppidResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &fcmp_passport_types.Media{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *GetMediaByAppidResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMediaByAppidResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetMediaByAppidResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetMediaByAppidResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetMediaByAppidResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMediaByAppidResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetMediaByIdsRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []int32 `thrift:"body,2" db:"body" json:"body"`
}

func NewGetMediaByIdsRequest() *GetMediaByIdsRequest {
  return &GetMediaByIdsRequest{}
}

var GetMediaByIdsRequest_Header_DEFAULT *common.Header
func (p *GetMediaByIdsRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetMediaByIdsRequest_Header_DEFAULT
  }
return p.Header
}

func (p *GetMediaByIdsRequest) GetBody() []int32 {
  return p.Body
}
func (p *GetMediaByIdsRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetMediaByIdsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetMediaByIdsRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetMediaByIdsRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Body = append(p.Body, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetMediaByIdsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMediaByIdsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetMediaByIdsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetMediaByIdsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetMediaByIdsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMediaByIdsRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetMediaByIdsResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body map[int32]*fcmp_passport_types.Media `thrift:"body,2" db:"body" json:"body"`
}

func NewGetMediaByIdsResponse() *GetMediaByIdsResponse {
  return &GetMediaByIdsResponse{}
}

var GetMediaByIdsResponse_Header_DEFAULT *common.Header
func (p *GetMediaByIdsResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetMediaByIdsResponse_Header_DEFAULT
  }
return p.Header
}

func (p *GetMediaByIdsResponse) GetBody() map[int32]*fcmp_passport_types.Media {
  return p.Body
}
func (p *GetMediaByIdsResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetMediaByIdsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetMediaByIdsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetMediaByIdsResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*fcmp_passport_types.Media, size)
  p.Body =  tMap
  for i := 0; i < size; i ++ {
var _key1 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
    _val2 := &fcmp_passport_types.Media{}
    if err := _val2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val2), err)
    }
    p.Body[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetMediaByIdsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetMediaByIdsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetMediaByIdsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetMediaByIdsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Body)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Body {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetMediaByIdsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMediaByIdsResponse(%+v)", *p)
}

// Attributes:
//  - Ids: 媒体ID *
//  - PublisherId: PublisherId *
//  - AccountId: 媒体主ID *
//  - Appid: 小程序APPID *
type SearchMediaParams struct {
  Ids []int32 `thrift:"ids,1" db:"ids" json:"ids"`
  PublisherId string `thrift:"publisher_id,2" db:"publisher_id" json:"publisher_id"`
  AccountId int32 `thrift:"account_id,3" db:"account_id" json:"account_id"`
  Appid string `thrift:"appid,4" db:"appid" json:"appid"`
}

func NewSearchMediaParams() *SearchMediaParams {
  return &SearchMediaParams{}
}


func (p *SearchMediaParams) GetIds() []int32 {
  return p.Ids
}

func (p *SearchMediaParams) GetPublisherId() string {
  return p.PublisherId
}

func (p *SearchMediaParams) GetAccountId() int32 {
  return p.AccountId
}

func (p *SearchMediaParams) GetAppid() string {
  return p.Appid
}
func (p *SearchMediaParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchMediaParams)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Ids = append(p.Ids, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchMediaParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PublisherId = v
}
  return nil
}

func (p *SearchMediaParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccountId = v
}
  return nil
}

func (p *SearchMediaParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *SearchMediaParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchMediaParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchMediaParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err) }
  return err
}

func (p *SearchMediaParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("publisher_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publisher_id: ", p), err) }
  if err := oprot.WriteString(string(p.PublisherId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.publisher_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publisher_id: ", p), err) }
  return err
}

func (p *SearchMediaParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:account_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:account_id: ", p), err) }
  return err
}

func (p *SearchMediaParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appid: ", p), err) }
  return err
}

func (p *SearchMediaParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchMediaParams(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type SearchMediaByParamsRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *SearchMediaParams `thrift:"body,2" db:"body" json:"body"`
}

func NewSearchMediaByParamsRequest() *SearchMediaByParamsRequest {
  return &SearchMediaByParamsRequest{}
}

var SearchMediaByParamsRequest_Header_DEFAULT *common.Header
func (p *SearchMediaByParamsRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return SearchMediaByParamsRequest_Header_DEFAULT
  }
return p.Header
}
var SearchMediaByParamsRequest_Body_DEFAULT *SearchMediaParams
func (p *SearchMediaByParamsRequest) GetBody() *SearchMediaParams {
  if !p.IsSetBody() {
    return SearchMediaByParamsRequest_Body_DEFAULT
  }
return p.Body
}
func (p *SearchMediaByParamsRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SearchMediaByParamsRequest) IsSetBody() bool {
  return p.Body != nil
}

func (p *SearchMediaByParamsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchMediaByParamsRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SearchMediaByParamsRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &SearchMediaParams{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *SearchMediaByParamsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchMediaByParamsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchMediaByParamsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *SearchMediaByParamsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *SearchMediaByParamsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchMediaByParamsRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type SearchMediaByParamsResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []*fcmp_passport_types.Media `thrift:"body,2" db:"body" json:"body"`
}

func NewSearchMediaByParamsResponse() *SearchMediaByParamsResponse {
  return &SearchMediaByParamsResponse{}
}

var SearchMediaByParamsResponse_Header_DEFAULT *common.Header
func (p *SearchMediaByParamsResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return SearchMediaByParamsResponse_Header_DEFAULT
  }
return p.Header
}

func (p *SearchMediaByParamsResponse) GetBody() []*fcmp_passport_types.Media {
  return p.Body
}
func (p *SearchMediaByParamsResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SearchMediaByParamsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchMediaByParamsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SearchMediaByParamsResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*fcmp_passport_types.Media, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &fcmp_passport_types.Media{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Body = append(p.Body, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchMediaByParamsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchMediaByParamsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchMediaByParamsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *SearchMediaByParamsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *SearchMediaByParamsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchMediaByParamsResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type LoginRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *fcmp_passport_types.MpUser `thrift:"body,2" db:"body" json:"body"`
}

func NewLoginRequest() *LoginRequest {
  return &LoginRequest{}
}

var LoginRequest_Header_DEFAULT *common.Header
func (p *LoginRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return LoginRequest_Header_DEFAULT
  }
return p.Header
}
var LoginRequest_Body_DEFAULT *fcmp_passport_types.MpUser
func (p *LoginRequest) GetBody() *fcmp_passport_types.MpUser {
  if !p.IsSetBody() {
    return LoginRequest_Body_DEFAULT
  }
return p.Body
}
func (p *LoginRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *LoginRequest) IsSetBody() bool {
  return p.Body != nil
}

func (p *LoginRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *LoginRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &fcmp_passport_types.MpUser{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *LoginRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *LoginRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *LoginRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type LoginResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *fcmp_passport_types.MpUser `thrift:"body,2" db:"body" json:"body"`
}

func NewLoginResponse() *LoginResponse {
  return &LoginResponse{}
}

var LoginResponse_Header_DEFAULT *common.Header
func (p *LoginResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return LoginResponse_Header_DEFAULT
  }
return p.Header
}
var LoginResponse_Body_DEFAULT *fcmp_passport_types.MpUser
func (p *LoginResponse) GetBody() *fcmp_passport_types.MpUser {
  if !p.IsSetBody() {
    return LoginResponse_Body_DEFAULT
  }
return p.Body
}
func (p *LoginResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *LoginResponse) IsSetBody() bool {
  return p.Body != nil
}

func (p *LoginResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *LoginResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &fcmp_passport_types.MpUser{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *LoginResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *LoginResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *LoginResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginResponse(%+v)", *p)
}

// Attributes:
//  - Header
type LogoutRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
}

func NewLogoutRequest() *LogoutRequest {
  return &LogoutRequest{}
}

var LogoutRequest_Header_DEFAULT *common.Header
func (p *LogoutRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return LogoutRequest_Header_DEFAULT
  }
return p.Header
}
func (p *LogoutRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *LogoutRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogoutRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *LogoutRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LogoutRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogoutRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *LogoutRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogoutRequest(%+v)", *p)
}

// Attributes:
//  - Header
type LogoutResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
}

func NewLogoutResponse() *LogoutResponse {
  return &LogoutResponse{}
}

var LogoutResponse_Header_DEFAULT *common.Header
func (p *LogoutResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return LogoutResponse_Header_DEFAULT
  }
return p.Header
}
func (p *LogoutResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *LogoutResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogoutResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *LogoutResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LogoutResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogoutResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *LogoutResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogoutResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type UpdateUserRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *fcmp_passport_types.MpUser `thrift:"body,2" db:"body" json:"body"`
}

func NewUpdateUserRequest() *UpdateUserRequest {
  return &UpdateUserRequest{}
}

var UpdateUserRequest_Header_DEFAULT *common.Header
func (p *UpdateUserRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return UpdateUserRequest_Header_DEFAULT
  }
return p.Header
}
var UpdateUserRequest_Body_DEFAULT *fcmp_passport_types.MpUser
func (p *UpdateUserRequest) GetBody() *fcmp_passport_types.MpUser {
  if !p.IsSetBody() {
    return UpdateUserRequest_Body_DEFAULT
  }
return p.Body
}
func (p *UpdateUserRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *UpdateUserRequest) IsSetBody() bool {
  return p.Body != nil
}

func (p *UpdateUserRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateUserRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *UpdateUserRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &fcmp_passport_types.MpUser{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *UpdateUserRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateUserRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateUserRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *UpdateUserRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *UpdateUserRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateUserRequest(%+v)", *p)
}

// Attributes:
//  - Header
type UpdateUserResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
}

func NewUpdateUserResponse() *UpdateUserResponse {
  return &UpdateUserResponse{}
}

var UpdateUserResponse_Header_DEFAULT *common.Header
func (p *UpdateUserResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return UpdateUserResponse_Header_DEFAULT
  }
return p.Header
}
func (p *UpdateUserResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *UpdateUserResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateUserResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *UpdateUserResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateUserResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateUserResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *UpdateUserResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateUserResponse(%+v)", *p)
}

// Attributes:
//  - Header
type GetUserRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
}

func NewGetUserRequest() *GetUserRequest {
  return &GetUserRequest{}
}

var GetUserRequest_Header_DEFAULT *common.Header
func (p *GetUserRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetUserRequest_Header_DEFAULT
  }
return p.Header
}
func (p *GetUserRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetUserResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *fcmp_passport_types.MpUser `thrift:"body,2" db:"body" json:"body"`
}

func NewGetUserResponse() *GetUserResponse {
  return &GetUserResponse{}
}

var GetUserResponse_Header_DEFAULT *common.Header
func (p *GetUserResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetUserResponse_Header_DEFAULT
  }
return p.Header
}
var GetUserResponse_Body_DEFAULT *fcmp_passport_types.MpUser
func (p *GetUserResponse) GetBody() *fcmp_passport_types.MpUser {
  if !p.IsSetBody() {
    return GetUserResponse_Body_DEFAULT
  }
return p.Body
}
func (p *GetUserResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserResponse) IsSetBody() bool {
  return p.Body != nil
}

func (p *GetUserResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &fcmp_passport_types.MpUser{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *GetUserResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetUserResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetUserByIdsRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []int32 `thrift:"body,2" db:"body" json:"body"`
}

func NewGetUserByIdsRequest() *GetUserByIdsRequest {
  return &GetUserByIdsRequest{}
}

var GetUserByIdsRequest_Header_DEFAULT *common.Header
func (p *GetUserByIdsRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetUserByIdsRequest_Header_DEFAULT
  }
return p.Header
}

func (p *GetUserByIdsRequest) GetBody() []int32 {
  return p.Body
}
func (p *GetUserByIdsRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserByIdsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserByIdsRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserByIdsRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Body = append(p.Body, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetUserByIdsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserByIdsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserByIdsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserByIdsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetUserByIdsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserByIdsRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetUserByIdsResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body map[int32]*fcmp_passport_types.MpUser `thrift:"body,2" db:"body" json:"body"`
}

func NewGetUserByIdsResponse() *GetUserByIdsResponse {
  return &GetUserByIdsResponse{}
}

var GetUserByIdsResponse_Header_DEFAULT *common.Header
func (p *GetUserByIdsResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetUserByIdsResponse_Header_DEFAULT
  }
return p.Header
}

func (p *GetUserByIdsResponse) GetBody() map[int32]*fcmp_passport_types.MpUser {
  return p.Body
}
func (p *GetUserByIdsResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserByIdsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserByIdsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserByIdsResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*fcmp_passport_types.MpUser, size)
  p.Body =  tMap
  for i := 0; i < size; i ++ {
var _key6 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
    _val7 := &fcmp_passport_types.MpUser{}
    if err := _val7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val7), err)
    }
    p.Body[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetUserByIdsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserByIdsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserByIdsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserByIdsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Body)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Body {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetUserByIdsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserByIdsResponse(%+v)", *p)
}

// Attributes:
//  - Ids: 用户ID *
//  - MediaId: 媒体ID *
//  - WxOpenid: 小程序OpenId *
//  - OuterUserId: 对应外部用户Id *
//  - PublisherId: PublisherId *
//  - Type: 用户类型 *
//  - Limit: 获取条数 最大100条 *
//  - Offset: 偏移量 *
type SearchUserParams struct {
  Ids []int32 `thrift:"ids,1" db:"ids" json:"ids"`
  MediaId int32 `thrift:"media_id,2" db:"media_id" json:"media_id"`
  WxOpenid string `thrift:"wx_openid,3" db:"wx_openid" json:"wx_openid"`
  OuterUserId string `thrift:"outer_user_id,4" db:"outer_user_id" json:"outer_user_id"`
  PublisherId string `thrift:"publisher_id,5" db:"publisher_id" json:"publisher_id"`
  Type fcmp_passport_types.UserTypeCode `thrift:"type,6" db:"type" json:"type"`
  // unused fields # 7 to 19
  Limit int32 `thrift:"limit,20" db:"limit" json:"limit"`
  Offset int32 `thrift:"offset,21" db:"offset" json:"offset"`
}

func NewSearchUserParams() *SearchUserParams {
  return &SearchUserParams{}
}


func (p *SearchUserParams) GetIds() []int32 {
  return p.Ids
}

func (p *SearchUserParams) GetMediaId() int32 {
  return p.MediaId
}

func (p *SearchUserParams) GetWxOpenid() string {
  return p.WxOpenid
}

func (p *SearchUserParams) GetOuterUserId() string {
  return p.OuterUserId
}

func (p *SearchUserParams) GetPublisherId() string {
  return p.PublisherId
}

func (p *SearchUserParams) GetType() fcmp_passport_types.UserTypeCode {
  return p.Type
}

func (p *SearchUserParams) GetLimit() int32 {
  return p.Limit
}

func (p *SearchUserParams) GetOffset() int32 {
  return p.Offset
}
func (p *SearchUserParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchUserParams)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.Ids = append(p.Ids, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchUserParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MediaId = v
}
  return nil
}

func (p *SearchUserParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WxOpenid = v
}
  return nil
}

func (p *SearchUserParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OuterUserId = v
}
  return nil
}

func (p *SearchUserParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PublisherId = v
}
  return nil
}

func (p *SearchUserParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := fcmp_passport_types.UserTypeCode(v)
  p.Type = temp
}
  return nil
}

func (p *SearchUserParams)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *SearchUserParams)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *SearchUserParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchUserParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchUserParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err) }
  return err
}

func (p *SearchUserParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:media_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.MediaId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.media_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:media_id: ", p), err) }
  return err
}

func (p *SearchUserParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wx_openid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wx_openid: ", p), err) }
  if err := oprot.WriteString(string(p.WxOpenid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wx_openid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wx_openid: ", p), err) }
  return err
}

func (p *SearchUserParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outer_user_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outer_user_id: ", p), err) }
  if err := oprot.WriteString(string(p.OuterUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outer_user_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outer_user_id: ", p), err) }
  return err
}

func (p *SearchUserParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("publisher_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:publisher_id: ", p), err) }
  if err := oprot.WriteString(string(p.PublisherId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.publisher_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:publisher_id: ", p), err) }
  return err
}

func (p *SearchUserParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type: ", p), err) }
  return err
}

func (p *SearchUserParams) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:limit: ", p), err) }
  return err
}

func (p *SearchUserParams) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:offset: ", p), err) }
  return err
}

func (p *SearchUserParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchUserParams(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type SearchUserByParamsRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *SearchUserParams `thrift:"body,2" db:"body" json:"body"`
}

func NewSearchUserByParamsRequest() *SearchUserByParamsRequest {
  return &SearchUserByParamsRequest{}
}

var SearchUserByParamsRequest_Header_DEFAULT *common.Header
func (p *SearchUserByParamsRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return SearchUserByParamsRequest_Header_DEFAULT
  }
return p.Header
}
var SearchUserByParamsRequest_Body_DEFAULT *SearchUserParams
func (p *SearchUserByParamsRequest) GetBody() *SearchUserParams {
  if !p.IsSetBody() {
    return SearchUserByParamsRequest_Body_DEFAULT
  }
return p.Body
}
func (p *SearchUserByParamsRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SearchUserByParamsRequest) IsSetBody() bool {
  return p.Body != nil
}

func (p *SearchUserByParamsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchUserByParamsRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SearchUserByParamsRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &SearchUserParams{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *SearchUserByParamsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchUserByParamsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchUserByParamsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *SearchUserByParamsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *SearchUserByParamsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchUserByParamsRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type SearchUserByParamsResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []*fcmp_passport_types.MpUser `thrift:"body,2" db:"body" json:"body"`
}

func NewSearchUserByParamsResponse() *SearchUserByParamsResponse {
  return &SearchUserByParamsResponse{}
}

var SearchUserByParamsResponse_Header_DEFAULT *common.Header
func (p *SearchUserByParamsResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return SearchUserByParamsResponse_Header_DEFAULT
  }
return p.Header
}

func (p *SearchUserByParamsResponse) GetBody() []*fcmp_passport_types.MpUser {
  return p.Body
}
func (p *SearchUserByParamsResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SearchUserByParamsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchUserByParamsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SearchUserByParamsResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*fcmp_passport_types.MpUser, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &fcmp_passport_types.MpUser{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Body = append(p.Body, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchUserByParamsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchUserByParamsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchUserByParamsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *SearchUserByParamsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *SearchUserByParamsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchUserByParamsResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type CreateUserFormidRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *fcmp_passport_types.MpUserFormid `thrift:"body,2" db:"body" json:"body"`
}

func NewCreateUserFormidRequest() *CreateUserFormidRequest {
  return &CreateUserFormidRequest{}
}

var CreateUserFormidRequest_Header_DEFAULT *common.Header
func (p *CreateUserFormidRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return CreateUserFormidRequest_Header_DEFAULT
  }
return p.Header
}
var CreateUserFormidRequest_Body_DEFAULT *fcmp_passport_types.MpUserFormid
func (p *CreateUserFormidRequest) GetBody() *fcmp_passport_types.MpUserFormid {
  if !p.IsSetBody() {
    return CreateUserFormidRequest_Body_DEFAULT
  }
return p.Body
}
func (p *CreateUserFormidRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *CreateUserFormidRequest) IsSetBody() bool {
  return p.Body != nil
}

func (p *CreateUserFormidRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserFormidRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *CreateUserFormidRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &fcmp_passport_types.MpUserFormid{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *CreateUserFormidRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateUserFormidRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserFormidRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *CreateUserFormidRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *CreateUserFormidRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserFormidRequest(%+v)", *p)
}

// Attributes:
//  - Header
type CreateUserFormidResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
}

func NewCreateUserFormidResponse() *CreateUserFormidResponse {
  return &CreateUserFormidResponse{}
}

var CreateUserFormidResponse_Header_DEFAULT *common.Header
func (p *CreateUserFormidResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return CreateUserFormidResponse_Header_DEFAULT
  }
return p.Header
}
func (p *CreateUserFormidResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *CreateUserFormidResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserFormidResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *CreateUserFormidResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateUserFormidResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserFormidResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *CreateUserFormidResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserFormidResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetUserFormidByUidsRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []int32 `thrift:"body,2" db:"body" json:"body"`
}

func NewGetUserFormidByUidsRequest() *GetUserFormidByUidsRequest {
  return &GetUserFormidByUidsRequest{}
}

var GetUserFormidByUidsRequest_Header_DEFAULT *common.Header
func (p *GetUserFormidByUidsRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetUserFormidByUidsRequest_Header_DEFAULT
  }
return p.Header
}

func (p *GetUserFormidByUidsRequest) GetBody() []int32 {
  return p.Body
}
func (p *GetUserFormidByUidsRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserFormidByUidsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserFormidByUidsRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserFormidByUidsRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.Body = append(p.Body, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetUserFormidByUidsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserFormidByUidsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserFormidByUidsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserFormidByUidsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetUserFormidByUidsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserFormidByUidsRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetUserFormidByUidsResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []*fcmp_passport_types.MpUserFormid `thrift:"body,2" db:"body" json:"body"`
}

func NewGetUserFormidByUidsResponse() *GetUserFormidByUidsResponse {
  return &GetUserFormidByUidsResponse{}
}

var GetUserFormidByUidsResponse_Header_DEFAULT *common.Header
func (p *GetUserFormidByUidsResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetUserFormidByUidsResponse_Header_DEFAULT
  }
return p.Header
}

func (p *GetUserFormidByUidsResponse) GetBody() []*fcmp_passport_types.MpUserFormid {
  return p.Body
}
func (p *GetUserFormidByUidsResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserFormidByUidsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserFormidByUidsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserFormidByUidsResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*fcmp_passport_types.MpUserFormid, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &fcmp_passport_types.MpUserFormid{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Body = append(p.Body, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetUserFormidByUidsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserFormidByUidsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserFormidByUidsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserFormidByUidsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetUserFormidByUidsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserFormidByUidsResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type CreateUserAddressRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *fcmp_passport_types.MpUserAddress `thrift:"body,2" db:"body" json:"body"`
}

func NewCreateUserAddressRequest() *CreateUserAddressRequest {
  return &CreateUserAddressRequest{}
}

var CreateUserAddressRequest_Header_DEFAULT *common.Header
func (p *CreateUserAddressRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return CreateUserAddressRequest_Header_DEFAULT
  }
return p.Header
}
var CreateUserAddressRequest_Body_DEFAULT *fcmp_passport_types.MpUserAddress
func (p *CreateUserAddressRequest) GetBody() *fcmp_passport_types.MpUserAddress {
  if !p.IsSetBody() {
    return CreateUserAddressRequest_Body_DEFAULT
  }
return p.Body
}
func (p *CreateUserAddressRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *CreateUserAddressRequest) IsSetBody() bool {
  return p.Body != nil
}

func (p *CreateUserAddressRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserAddressRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *CreateUserAddressRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &fcmp_passport_types.MpUserAddress{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *CreateUserAddressRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateUserAddressRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserAddressRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *CreateUserAddressRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *CreateUserAddressRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserAddressRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type CreateUserAddressResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body int32 `thrift:"body,2" db:"body" json:"body"`
}

func NewCreateUserAddressResponse() *CreateUserAddressResponse {
  return &CreateUserAddressResponse{}
}

var CreateUserAddressResponse_Header_DEFAULT *common.Header
func (p *CreateUserAddressResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return CreateUserAddressResponse_Header_DEFAULT
  }
return p.Header
}

func (p *CreateUserAddressResponse) GetBody() int32 {
  return p.Body
}
func (p *CreateUserAddressResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *CreateUserAddressResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserAddressResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *CreateUserAddressResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *CreateUserAddressResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateUserAddressResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserAddressResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *CreateUserAddressResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteI32(int32(p.Body)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.body (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *CreateUserAddressResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserAddressResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type UpdateUserAddressRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *fcmp_passport_types.MpUserAddress `thrift:"body,2" db:"body" json:"body"`
}

func NewUpdateUserAddressRequest() *UpdateUserAddressRequest {
  return &UpdateUserAddressRequest{}
}

var UpdateUserAddressRequest_Header_DEFAULT *common.Header
func (p *UpdateUserAddressRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return UpdateUserAddressRequest_Header_DEFAULT
  }
return p.Header
}
var UpdateUserAddressRequest_Body_DEFAULT *fcmp_passport_types.MpUserAddress
func (p *UpdateUserAddressRequest) GetBody() *fcmp_passport_types.MpUserAddress {
  if !p.IsSetBody() {
    return UpdateUserAddressRequest_Body_DEFAULT
  }
return p.Body
}
func (p *UpdateUserAddressRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *UpdateUserAddressRequest) IsSetBody() bool {
  return p.Body != nil
}

func (p *UpdateUserAddressRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateUserAddressRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *UpdateUserAddressRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &fcmp_passport_types.MpUserAddress{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *UpdateUserAddressRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateUserAddressRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateUserAddressRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *UpdateUserAddressRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *UpdateUserAddressRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateUserAddressRequest(%+v)", *p)
}

// Attributes:
//  - Header
type UpdateUserAddressResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
}

func NewUpdateUserAddressResponse() *UpdateUserAddressResponse {
  return &UpdateUserAddressResponse{}
}

var UpdateUserAddressResponse_Header_DEFAULT *common.Header
func (p *UpdateUserAddressResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return UpdateUserAddressResponse_Header_DEFAULT
  }
return p.Header
}
func (p *UpdateUserAddressResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *UpdateUserAddressResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateUserAddressResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *UpdateUserAddressResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateUserAddressResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateUserAddressResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *UpdateUserAddressResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateUserAddressResponse(%+v)", *p)
}

// Attributes:
//  - UserId: user id *
//  - IsDefault: 是否默认地址 *
type SearchUserAddressParams struct {
  UserId int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  IsDefault bool `thrift:"is_default,2" db:"is_default" json:"is_default"`
}

func NewSearchUserAddressParams() *SearchUserAddressParams {
  return &SearchUserAddressParams{}
}


func (p *SearchUserAddressParams) GetUserId() int32 {
  return p.UserId
}

func (p *SearchUserAddressParams) GetIsDefault() bool {
  return p.IsDefault
}
func (p *SearchUserAddressParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchUserAddressParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *SearchUserAddressParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsDefault = v
}
  return nil
}

func (p *SearchUserAddressParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchUserAddressParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchUserAddressParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *SearchUserAddressParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_default", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_default: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_default (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_default: ", p), err) }
  return err
}

func (p *SearchUserAddressParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchUserAddressParams(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type SearchUserAddressByParamsRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body *SearchUserAddressParams `thrift:"body,2" db:"body" json:"body"`
}

func NewSearchUserAddressByParamsRequest() *SearchUserAddressByParamsRequest {
  return &SearchUserAddressByParamsRequest{}
}

var SearchUserAddressByParamsRequest_Header_DEFAULT *common.Header
func (p *SearchUserAddressByParamsRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return SearchUserAddressByParamsRequest_Header_DEFAULT
  }
return p.Header
}
var SearchUserAddressByParamsRequest_Body_DEFAULT *SearchUserAddressParams
func (p *SearchUserAddressByParamsRequest) GetBody() *SearchUserAddressParams {
  if !p.IsSetBody() {
    return SearchUserAddressByParamsRequest_Body_DEFAULT
  }
return p.Body
}
func (p *SearchUserAddressByParamsRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SearchUserAddressByParamsRequest) IsSetBody() bool {
  return p.Body != nil
}

func (p *SearchUserAddressByParamsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchUserAddressByParamsRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SearchUserAddressByParamsRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Body = &SearchUserAddressParams{}
  if err := p.Body.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Body), err)
  }
  return nil
}

func (p *SearchUserAddressByParamsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchUserAddressByParamsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchUserAddressByParamsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *SearchUserAddressByParamsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := p.Body.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Body), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *SearchUserAddressByParamsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchUserAddressByParamsRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type SearchUserAddressByParamsResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []*fcmp_passport_types.MpUserAddress `thrift:"body,2" db:"body" json:"body"`
}

func NewSearchUserAddressByParamsResponse() *SearchUserAddressByParamsResponse {
  return &SearchUserAddressByParamsResponse{}
}

var SearchUserAddressByParamsResponse_Header_DEFAULT *common.Header
func (p *SearchUserAddressByParamsResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return SearchUserAddressByParamsResponse_Header_DEFAULT
  }
return p.Header
}

func (p *SearchUserAddressByParamsResponse) GetBody() []*fcmp_passport_types.MpUserAddress {
  return p.Body
}
func (p *SearchUserAddressByParamsResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SearchUserAddressByParamsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchUserAddressByParamsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SearchUserAddressByParamsResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*fcmp_passport_types.MpUserAddress, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &fcmp_passport_types.MpUserAddress{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.Body = append(p.Body, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchUserAddressByParamsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchUserAddressByParamsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchUserAddressByParamsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *SearchUserAddressByParamsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *SearchUserAddressByParamsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchUserAddressByParamsResponse(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetUserFinanceByUidsRequest struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []int32 `thrift:"body,2" db:"body" json:"body"`
}

func NewGetUserFinanceByUidsRequest() *GetUserFinanceByUidsRequest {
  return &GetUserFinanceByUidsRequest{}
}

var GetUserFinanceByUidsRequest_Header_DEFAULT *common.Header
func (p *GetUserFinanceByUidsRequest) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetUserFinanceByUidsRequest_Header_DEFAULT
  }
return p.Header
}

func (p *GetUserFinanceByUidsRequest) GetBody() []int32 {
  return p.Body
}
func (p *GetUserFinanceByUidsRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserFinanceByUidsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserFinanceByUidsRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserFinanceByUidsRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.Body = append(p.Body, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetUserFinanceByUidsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserFinanceByUidsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserFinanceByUidsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserFinanceByUidsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetUserFinanceByUidsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserFinanceByUidsRequest(%+v)", *p)
}

// Attributes:
//  - Header
//  - Body
type GetUserFinanceByUidsResponse struct {
  Header *common.Header `thrift:"header,1" db:"header" json:"header"`
  Body []*fcmp_passport_types.MpUserFinance `thrift:"body,2" db:"body" json:"body"`
}

func NewGetUserFinanceByUidsResponse() *GetUserFinanceByUidsResponse {
  return &GetUserFinanceByUidsResponse{}
}

var GetUserFinanceByUidsResponse_Header_DEFAULT *common.Header
func (p *GetUserFinanceByUidsResponse) GetHeader() *common.Header {
  if !p.IsSetHeader() {
    return GetUserFinanceByUidsResponse_Header_DEFAULT
  }
return p.Header
}

func (p *GetUserFinanceByUidsResponse) GetBody() []*fcmp_passport_types.MpUserFinance {
  return p.Body
}
func (p *GetUserFinanceByUidsResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserFinanceByUidsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserFinanceByUidsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &common.Header{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserFinanceByUidsResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*fcmp_passport_types.MpUserFinance, 0, size)
  p.Body =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &fcmp_passport_types.MpUserFinance{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Body = append(p.Body, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetUserFinanceByUidsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserFinanceByUidsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserFinanceByUidsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserFinanceByUidsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Body)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Body {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err) }
  return err
}

func (p *GetUserFinanceByUidsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserFinanceByUidsResponse(%+v)", *p)
}

