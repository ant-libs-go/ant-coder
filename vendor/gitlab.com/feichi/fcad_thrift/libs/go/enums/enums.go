// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package enums

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//RPC响应状态码
type ResponseCode int64
const (
  ResponseCode_OK ResponseCode = 200
  ResponseCode_MOVED ResponseCode = 301
  ResponseCode_BAD_REQUEST ResponseCode = 400
  ResponseCode_UNAUTHORIZED ResponseCode = 401
  ResponseCode_NOT_FOUND ResponseCode = 404
  ResponseCode_TOO_LARGE ResponseCode = 413
  ResponseCode_SERVER_ERROR ResponseCode = 500
  ResponseCode_TIMEOUT ResponseCode = 504
)

func (p ResponseCode) String() string {
  switch p {
  case ResponseCode_OK: return "OK"
  case ResponseCode_MOVED: return "MOVED"
  case ResponseCode_BAD_REQUEST: return "BAD_REQUEST"
  case ResponseCode_UNAUTHORIZED: return "UNAUTHORIZED"
  case ResponseCode_NOT_FOUND: return "NOT_FOUND"
  case ResponseCode_TOO_LARGE: return "TOO_LARGE"
  case ResponseCode_SERVER_ERROR: return "SERVER_ERROR"
  case ResponseCode_TIMEOUT: return "TIMEOUT"
  }
  return "<UNSET>"
}

func ResponseCodeFromString(s string) (ResponseCode, error) {
  switch s {
  case "OK": return ResponseCode_OK, nil 
  case "MOVED": return ResponseCode_MOVED, nil 
  case "BAD_REQUEST": return ResponseCode_BAD_REQUEST, nil 
  case "UNAUTHORIZED": return ResponseCode_UNAUTHORIZED, nil 
  case "NOT_FOUND": return ResponseCode_NOT_FOUND, nil 
  case "TOO_LARGE": return ResponseCode_TOO_LARGE, nil 
  case "SERVER_ERROR": return ResponseCode_SERVER_ERROR, nil 
  case "TIMEOUT": return ResponseCode_TIMEOUT, nil 
  }
  return ResponseCode(0), fmt.Errorf("not a valid ResponseCode string")
}


func ResponseCodePtr(v ResponseCode) *ResponseCode { return &v }

func (p ResponseCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResponseCode) UnmarshalText(text []byte) error {
q, err := ResponseCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResponseCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResponseCode(v)
return nil
}

func (p * ResponseCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//事件Topic Code
type EventTopic int64
const (
  EventTopic_MP_USER_ADD EventTopic = 1
  EventTopic_MP_USER_EDIT EventTopic = 2
  EventTopic_MP_USER_COST EventTopic = 3
  EventTopic_MP_USER_EARN EventTopic = 4
)

func (p EventTopic) String() string {
  switch p {
  case EventTopic_MP_USER_ADD: return "MP_USER_ADD"
  case EventTopic_MP_USER_EDIT: return "MP_USER_EDIT"
  case EventTopic_MP_USER_COST: return "MP_USER_COST"
  case EventTopic_MP_USER_EARN: return "MP_USER_EARN"
  }
  return "<UNSET>"
}

func EventTopicFromString(s string) (EventTopic, error) {
  switch s {
  case "MP_USER_ADD": return EventTopic_MP_USER_ADD, nil 
  case "MP_USER_EDIT": return EventTopic_MP_USER_EDIT, nil 
  case "MP_USER_COST": return EventTopic_MP_USER_COST, nil 
  case "MP_USER_EARN": return EventTopic_MP_USER_EARN, nil 
  }
  return EventTopic(0), fmt.Errorf("not a valid EventTopic string")
}


func EventTopicPtr(v EventTopic) *EventTopic { return &v }

func (p EventTopic) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EventTopic) UnmarshalText(text []byte) error {
q, err := EventTopicFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EventTopic) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EventTopic(v)
return nil
}

func (p * EventTopic) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//性别代码
type GenderCode int64
const (
  GenderCode_UNKNOWN GenderCode = 0
  GenderCode_MALE GenderCode = 1
  GenderCode_FEMALE GenderCode = 2
)

func (p GenderCode) String() string {
  switch p {
  case GenderCode_UNKNOWN: return "UNKNOWN"
  case GenderCode_MALE: return "MALE"
  case GenderCode_FEMALE: return "FEMALE"
  }
  return "<UNSET>"
}

func GenderCodeFromString(s string) (GenderCode, error) {
  switch s {
  case "UNKNOWN": return GenderCode_UNKNOWN, nil 
  case "MALE": return GenderCode_MALE, nil 
  case "FEMALE": return GenderCode_FEMALE, nil 
  }
  return GenderCode(0), fmt.Errorf("not a valid GenderCode string")
}


func GenderCodePtr(v GenderCode) *GenderCode { return &v }

func (p GenderCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GenderCode) UnmarshalText(text []byte) error {
q, err := GenderCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GenderCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GenderCode(v)
return nil
}

func (p * GenderCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//数据删除状态
type InfoStatus int64
const (
  InfoStatus_Normal InfoStatus = 0
  InfoStatus_Deleted InfoStatus = 1
)

func (p InfoStatus) String() string {
  switch p {
  case InfoStatus_Normal: return "Normal"
  case InfoStatus_Deleted: return "Deleted"
  }
  return "<UNSET>"
}

func InfoStatusFromString(s string) (InfoStatus, error) {
  switch s {
  case "Normal": return InfoStatus_Normal, nil 
  case "Deleted": return InfoStatus_Deleted, nil 
  }
  return InfoStatus(0), fmt.Errorf("not a valid InfoStatus string")
}


func InfoStatusPtr(v InfoStatus) *InfoStatus { return &v }

func (p InfoStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *InfoStatus) UnmarshalText(text []byte) error {
q, err := InfoStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *InfoStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = InfoStatus(v)
return nil
}

func (p * InfoStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//审核状态
type AuditStatus int64
const (
  AuditStatus_Normal AuditStatus = 0
  AuditStatus_Waiting AuditStatus = 1
  AuditStatus_Reject AuditStatus = 2
  AuditStatus_Pass AuditStatus = 3
  AuditStatus_Frozen AuditStatus = 4
)

func (p AuditStatus) String() string {
  switch p {
  case AuditStatus_Normal: return "Normal"
  case AuditStatus_Waiting: return "Waiting"
  case AuditStatus_Reject: return "Reject"
  case AuditStatus_Pass: return "Pass"
  case AuditStatus_Frozen: return "Frozen"
  }
  return "<UNSET>"
}

func AuditStatusFromString(s string) (AuditStatus, error) {
  switch s {
  case "Normal": return AuditStatus_Normal, nil 
  case "Waiting": return AuditStatus_Waiting, nil 
  case "Reject": return AuditStatus_Reject, nil 
  case "Pass": return AuditStatus_Pass, nil 
  case "Frozen": return AuditStatus_Frozen, nil 
  }
  return AuditStatus(0), fmt.Errorf("not a valid AuditStatus string")
}


func AuditStatusPtr(v AuditStatus) *AuditStatus { return &v }

func (p AuditStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AuditStatus) UnmarshalText(text []byte) error {
q, err := AuditStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AuditStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AuditStatus(v)
return nil
}

func (p * AuditStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//运行状态
type RunningStatus int64
const (
  RunningStatus_Normal RunningStatus = 0
  RunningStatus_Suspend RunningStatus = 1
)

func (p RunningStatus) String() string {
  switch p {
  case RunningStatus_Normal: return "Normal"
  case RunningStatus_Suspend: return "Suspend"
  }
  return "<UNSET>"
}

func RunningStatusFromString(s string) (RunningStatus, error) {
  switch s {
  case "Normal": return RunningStatus_Normal, nil 
  case "Suspend": return RunningStatus_Suspend, nil 
  }
  return RunningStatus(0), fmt.Errorf("not a valid RunningStatus string")
}


func RunningStatusPtr(v RunningStatus) *RunningStatus { return &v }

func (p RunningStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RunningStatus) UnmarshalText(text []byte) error {
q, err := RunningStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RunningStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RunningStatus(v)
return nil
}

func (p * RunningStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
