// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package fcmp_passport_types

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"gitlab.com/feichi/fcad_thrift/libs/go/enums"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = enums.GoUnusedProtection__
//用户类型代码
type UserTypeCode int64
const (
  UserTypeCode_OWN UserTypeCode = 1
  UserTypeCode_BS UserTypeCode = 2
  UserTypeCode_KOL UserTypeCode = 3
  UserTypeCode_ROBOT UserTypeCode = 4
)

func (p UserTypeCode) String() string {
  switch p {
  case UserTypeCode_OWN: return "OWN"
  case UserTypeCode_BS: return "BS"
  case UserTypeCode_KOL: return "KOL"
  case UserTypeCode_ROBOT: return "ROBOT"
  }
  return "<UNSET>"
}

func UserTypeCodeFromString(s string) (UserTypeCode, error) {
  switch s {
  case "OWN": return UserTypeCode_OWN, nil 
  case "BS": return UserTypeCode_BS, nil 
  case "KOL": return UserTypeCode_KOL, nil 
  case "ROBOT": return UserTypeCode_ROBOT, nil 
  }
  return UserTypeCode(0), fmt.Errorf("not a valid UserTypeCode string")
}


func UserTypeCodePtr(v UserTypeCode) *UserTypeCode { return &v }

func (p UserTypeCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UserTypeCode) UnmarshalText(text []byte) error {
q, err := UserTypeCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UserTypeCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UserTypeCode(v)
return nil
}

func (p * UserTypeCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//运行状态
type UserSourceCode int64
const (
  UserSourceCode_NATURAL UserSourceCode = 0
  UserSourceCode_AD_BUY UserSourceCode = 1
  UserSourceCode_INVITE UserSourceCode = 2
)

func (p UserSourceCode) String() string {
  switch p {
  case UserSourceCode_NATURAL: return "NATURAL"
  case UserSourceCode_AD_BUY: return "AD_BUY"
  case UserSourceCode_INVITE: return "INVITE"
  }
  return "<UNSET>"
}

func UserSourceCodeFromString(s string) (UserSourceCode, error) {
  switch s {
  case "NATURAL": return UserSourceCode_NATURAL, nil 
  case "AD_BUY": return UserSourceCode_AD_BUY, nil 
  case "INVITE": return UserSourceCode_INVITE, nil 
  }
  return UserSourceCode(0), fmt.Errorf("not a valid UserSourceCode string")
}


func UserSourceCodePtr(v UserSourceCode) *UserSourceCode { return &v }

func (p UserSourceCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UserSourceCode) UnmarshalText(text []byte) error {
q, err := UserSourceCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UserSourceCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UserSourceCode(v)
return nil
}

func (p * UserSourceCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// 小程序信息
// 
// Attributes:
//  - Id: 媒体ID *
//  - AccountId: 媒体主ID *
//  - Appid: 小程序APPID *
//  - Secret: 小程序secret *
//  - Name: 小程序名称 *
//  - Category: 媒体分类 *
//  - Icon: 小程序头像 *
//  - Qrcode: 小程序二维码 *
//  - WxSdkversion: 小程序最低基础版本 *
//  - Description: 小程序简介 *
//  - AccessToken: token *
//  - ExpiresTime: token过期时间 *
//  - Note: 备注 *
//  - AuditStatus: 审核状态 *
//  - AuditReason: 拒绝原因 *
//  - RunningStatus: 运行状态 *
//  - Status: 状态 *
//  - CreatedAt: 创建时间 *
//  - UpdatedAt: 修改时间 *
type Media struct {
  Id int32 `thrift:"id,1" db:"id" json:"id"`
  AccountId int32 `thrift:"account_id,2" db:"account_id" json:"account_id"`
  Appid string `thrift:"appid,3" db:"appid" json:"appid"`
  Secret string `thrift:"secret,4" db:"secret" json:"secret"`
  Name string `thrift:"name,5" db:"name" json:"name"`
  // unused fields # 6 to 9
  Category int32 `thrift:"category,10" db:"category" json:"category"`
  Icon string `thrift:"icon,11" db:"icon" json:"icon"`
  Qrcode string `thrift:"qrcode,12" db:"qrcode" json:"qrcode"`
  WxSdkversion int32 `thrift:"wx_sdkversion,13" db:"wx_sdkversion" json:"wx_sdkversion"`
  Description string `thrift:"description,14" db:"description" json:"description"`
  AccessToken string `thrift:"access_token,15" db:"access_token" json:"access_token"`
  ExpiresTime int32 `thrift:"expires_time,16" db:"expires_time" json:"expires_time"`
  // unused fields # 17 to 19
  Note string `thrift:"note,20" db:"note" json:"note"`
  AuditStatus enums.AuditStatus `thrift:"audit_status,21" db:"audit_status" json:"audit_status"`
  AuditReason string `thrift:"audit_reason,22" db:"audit_reason" json:"audit_reason"`
  RunningStatus enums.RunningStatus `thrift:"running_status,23" db:"running_status" json:"running_status"`
  Status enums.InfoStatus `thrift:"status,24" db:"status" json:"status"`
  CreatedAt int64 `thrift:"created_at,25" db:"created_at" json:"created_at"`
  UpdatedAt int64 `thrift:"updated_at,26" db:"updated_at" json:"updated_at"`
}

func NewMedia() *Media {
  return &Media{}
}


func (p *Media) GetId() int32 {
  return p.Id
}

func (p *Media) GetAccountId() int32 {
  return p.AccountId
}

func (p *Media) GetAppid() string {
  return p.Appid
}

func (p *Media) GetSecret() string {
  return p.Secret
}

func (p *Media) GetName() string {
  return p.Name
}

func (p *Media) GetCategory() int32 {
  return p.Category
}

func (p *Media) GetIcon() string {
  return p.Icon
}

func (p *Media) GetQrcode() string {
  return p.Qrcode
}

func (p *Media) GetWxSdkversion() int32 {
  return p.WxSdkversion
}

func (p *Media) GetDescription() string {
  return p.Description
}

func (p *Media) GetAccessToken() string {
  return p.AccessToken
}

func (p *Media) GetExpiresTime() int32 {
  return p.ExpiresTime
}

func (p *Media) GetNote() string {
  return p.Note
}

func (p *Media) GetAuditStatus() enums.AuditStatus {
  return p.AuditStatus
}

func (p *Media) GetAuditReason() string {
  return p.AuditReason
}

func (p *Media) GetRunningStatus() enums.RunningStatus {
  return p.RunningStatus
}

func (p *Media) GetStatus() enums.InfoStatus {
  return p.Status
}

func (p *Media) GetCreatedAt() int64 {
  return p.CreatedAt
}

func (p *Media) GetUpdatedAt() int64 {
  return p.UpdatedAt
}
func (p *Media) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Media)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *Media)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountId = v
}
  return nil
}

func (p *Media)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *Media)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *Media)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Media)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Category = v
}
  return nil
}

func (p *Media)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Icon = v
}
  return nil
}

func (p *Media)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Qrcode = v
}
  return nil
}

func (p *Media)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.WxSdkversion = v
}
  return nil
}

func (p *Media)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *Media)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.AccessToken = v
}
  return nil
}

func (p *Media)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ExpiresTime = v
}
  return nil
}

func (p *Media)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Note = v
}
  return nil
}

func (p *Media)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  temp := enums.AuditStatus(v)
  p.AuditStatus = temp
}
  return nil
}

func (p *Media)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.AuditReason = v
}
  return nil
}

func (p *Media)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  temp := enums.RunningStatus(v)
  p.RunningStatus = temp
}
  return nil
}

func (p *Media)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  temp := enums.InfoStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Media)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *Media)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *Media) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Media"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Media) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Media) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account_id: ", p), err) }
  return err
}

func (p *Media) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err) }
  return err
}

func (p *Media) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secret", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:secret: ", p), err) }
  if err := oprot.WriteString(string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:secret: ", p), err) }
  return err
}

func (p *Media) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err) }
  return err
}

func (p *Media) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("category", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:category: ", p), err) }
  if err := oprot.WriteI32(int32(p.Category)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:category: ", p), err) }
  return err
}

func (p *Media) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("icon", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:icon: ", p), err) }
  if err := oprot.WriteString(string(p.Icon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.icon (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:icon: ", p), err) }
  return err
}

func (p *Media) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("qrcode", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:qrcode: ", p), err) }
  if err := oprot.WriteString(string(p.Qrcode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qrcode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:qrcode: ", p), err) }
  return err
}

func (p *Media) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wx_sdkversion", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:wx_sdkversion: ", p), err) }
  if err := oprot.WriteI32(int32(p.WxSdkversion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wx_sdkversion (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:wx_sdkversion: ", p), err) }
  return err
}

func (p *Media) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:description: ", p), err) }
  return err
}

func (p *Media) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("access_token", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:access_token: ", p), err) }
  if err := oprot.WriteString(string(p.AccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.access_token (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:access_token: ", p), err) }
  return err
}

func (p *Media) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expires_time", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:expires_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExpiresTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expires_time (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:expires_time: ", p), err) }
  return err
}

func (p *Media) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("note", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:note: ", p), err) }
  if err := oprot.WriteString(string(p.Note)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.note (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:note: ", p), err) }
  return err
}

func (p *Media) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("audit_status", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:audit_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.AuditStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.audit_status (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:audit_status: ", p), err) }
  return err
}

func (p *Media) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("audit_reason", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:audit_reason: ", p), err) }
  if err := oprot.WriteString(string(p.AuditReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.audit_reason (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:audit_reason: ", p), err) }
  return err
}

func (p *Media) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("running_status", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:running_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.RunningStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.running_status (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:running_status: ", p), err) }
  return err
}

func (p *Media) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:status: ", p), err) }
  return err
}

func (p *Media) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:created_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:created_at: ", p), err) }
  return err
}

func (p *Media) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.I64, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:updated_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:updated_at: ", p), err) }
  return err
}

func (p *Media) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Media(%+v)", *p)
}

// 小程序用户结构
// 
// Attributes:
//  - Id: 小程序UnionId *
//  - Nickname: 用户昵称 *
//  - AvatarUrl: 用户头像地址 *
//  - Gender: 用户性别 *
//  - Country: 用户国家 *
//  - Province: 用户省份 *
//  - City: 用户城市 *
//  - Status: 用户在全平台的状态，只读 *
//  - CreatedAt: 用户在全平台的注册时间，只读 *
//  - UpdatedAt: 最后在全平台的最后登录时间，只读 *
type MpUserBase struct {
  Id int32 `thrift:"id,1" db:"id" json:"id"`
  Nickname string `thrift:"nickname,2" db:"nickname" json:"nickname"`
  AvatarUrl string `thrift:"avatar_url,3" db:"avatar_url" json:"avatar_url"`
  Gender enums.GenderCode `thrift:"gender,4" db:"gender" json:"gender"`
  Country string `thrift:"country,5" db:"country" json:"country"`
  Province string `thrift:"province,6" db:"province" json:"province"`
  City string `thrift:"city,7" db:"city" json:"city"`
  // unused fields # 8 to 29
  Status enums.InfoStatus `thrift:"status,30" db:"status" json:"status"`
  CreatedAt int64 `thrift:"created_at,31" db:"created_at" json:"created_at"`
  UpdatedAt int64 `thrift:"updated_at,32" db:"updated_at" json:"updated_at"`
}

func NewMpUserBase() *MpUserBase {
  return &MpUserBase{}
}


func (p *MpUserBase) GetId() int32 {
  return p.Id
}

func (p *MpUserBase) GetNickname() string {
  return p.Nickname
}

func (p *MpUserBase) GetAvatarUrl() string {
  return p.AvatarUrl
}

func (p *MpUserBase) GetGender() enums.GenderCode {
  return p.Gender
}

func (p *MpUserBase) GetCountry() string {
  return p.Country
}

func (p *MpUserBase) GetProvince() string {
  return p.Province
}

func (p *MpUserBase) GetCity() string {
  return p.City
}

func (p *MpUserBase) GetStatus() enums.InfoStatus {
  return p.Status
}

func (p *MpUserBase) GetCreatedAt() int64 {
  return p.CreatedAt
}

func (p *MpUserBase) GetUpdatedAt() int64 {
  return p.UpdatedAt
}
func (p *MpUserBase) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MpUserBase)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *MpUserBase)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nickname = v
}
  return nil
}

func (p *MpUserBase)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AvatarUrl = v
}
  return nil
}

func (p *MpUserBase)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := enums.GenderCode(v)
  p.Gender = temp
}
  return nil
}

func (p *MpUserBase)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *MpUserBase)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Province = v
}
  return nil
}

func (p *MpUserBase)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.City = v
}
  return nil
}

func (p *MpUserBase)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  temp := enums.InfoStatus(v)
  p.Status = temp
}
  return nil
}

func (p *MpUserBase)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *MpUserBase)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *MpUserBase) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MpUserBase"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MpUserBase) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MpUserBase) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickname: ", p), err) }
  if err := oprot.WriteString(string(p.Nickname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nickname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickname: ", p), err) }
  return err
}

func (p *MpUserBase) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatar_url", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:avatar_url: ", p), err) }
  if err := oprot.WriteString(string(p.AvatarUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatar_url (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:avatar_url: ", p), err) }
  return err
}

func (p *MpUserBase) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gender", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gender: ", p), err) }
  if err := oprot.WriteI32(int32(p.Gender)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gender (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gender: ", p), err) }
  return err
}

func (p *MpUserBase) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:country: ", p), err) }
  if err := oprot.WriteString(string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:country: ", p), err) }
  return err
}

func (p *MpUserBase) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("province", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:province: ", p), err) }
  if err := oprot.WriteString(string(p.Province)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.province (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:province: ", p), err) }
  return err
}

func (p *MpUserBase) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("city", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:city: ", p), err) }
  if err := oprot.WriteString(string(p.City)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.city (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:city: ", p), err) }
  return err
}

func (p *MpUserBase) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:status: ", p), err) }
  return err
}

func (p *MpUserBase) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:created_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:created_at: ", p), err) }
  return err
}

func (p *MpUserBase) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.I64, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:updated_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:updated_at: ", p), err) }
  return err
}

func (p *MpUserBase) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MpUserBase(%+v)", *p)
}

// 小程序用户信息
// 
// Attributes:
//  - Id: 用户ID *
//  - Media: 小程序，不可修改 *
//  - WxOpenid: 小程序OpenId，不可修改 *
//  - OuterUserId: 对应外部用户Id，不可修改 *
//  - Nickname: 用户昵称 *
//  - AvatarUrl: 用户头像地址 *
//  - Gender: 用户性别 *
//  - Country: 用户国家 *
//  - Province: 用户省份 *
//  - City: 用户城市 *
//  - CustomNickname: 用户自定义昵称 *
//  - CustomAvatarUrl: 用户自定义头像 *
//  - Type: 用户类型-1:自有产品 2:积分商城 3:kol 4:机器人 *
//  - ReferrerCode: 推荐人，不可修改 *
//  - InviteCode: 我的邀请码，只读 *
//  - IsNew: 是否为新用户，只读，不区分是否授权 *
//  - IsAuth: 是否授权，只读 *
//  - IsFirstAuth: 是否第一次授权，只读 *
//  - Source: 用户的来源，授权后不可以修改 *
//  - Status: 用户状态，只读 *
//  - CreatedAt: 用户注册时间，只读 *
//  - UpdatedAt: 最后最后登录时间，只读 *
type MpUser struct {
  Id int32 `thrift:"id,1" db:"id" json:"id"`
  Media *Media `thrift:"media,2" db:"media" json:"media"`
  WxOpenid string `thrift:"wx_openid,3" db:"wx_openid" json:"wx_openid"`
  OuterUserId string `thrift:"outer_user_id,4" db:"outer_user_id" json:"outer_user_id"`
  Nickname string `thrift:"nickname,5" db:"nickname" json:"nickname"`
  AvatarUrl string `thrift:"avatar_url,6" db:"avatar_url" json:"avatar_url"`
  Gender enums.GenderCode `thrift:"gender,7" db:"gender" json:"gender"`
  Country string `thrift:"country,8" db:"country" json:"country"`
  Province string `thrift:"province,9" db:"province" json:"province"`
  City string `thrift:"city,10" db:"city" json:"city"`
  CustomNickname string `thrift:"custom_nickname,11" db:"custom_nickname" json:"custom_nickname"`
  CustomAvatarUrl string `thrift:"custom_avatar_url,12" db:"custom_avatar_url" json:"custom_avatar_url"`
  Type UserTypeCode `thrift:"type,13" db:"type" json:"type"`
  // unused fields # 14 to 26
  ReferrerCode string `thrift:"referrer_code,27" db:"referrer_code" json:"referrer_code"`
  InviteCode string `thrift:"invite_code,28" db:"invite_code" json:"invite_code"`
  IsNew bool `thrift:"is_new,29" db:"is_new" json:"is_new"`
  IsAuth bool `thrift:"is_auth,30" db:"is_auth" json:"is_auth"`
  IsFirstAuth bool `thrift:"is_first_auth,31" db:"is_first_auth" json:"is_first_auth"`
  // unused fields # 32 to 38
  Source UserSourceCode `thrift:"source,39" db:"source" json:"source"`
  Status enums.InfoStatus `thrift:"status,40" db:"status" json:"status"`
  CreatedAt int64 `thrift:"created_at,41" db:"created_at" json:"created_at"`
  UpdatedAt int64 `thrift:"updated_at,42" db:"updated_at" json:"updated_at"`
}

func NewMpUser() *MpUser {
  return &MpUser{}
}


func (p *MpUser) GetId() int32 {
  return p.Id
}
var MpUser_Media_DEFAULT *Media
func (p *MpUser) GetMedia() *Media {
  if !p.IsSetMedia() {
    return MpUser_Media_DEFAULT
  }
return p.Media
}

func (p *MpUser) GetWxOpenid() string {
  return p.WxOpenid
}

func (p *MpUser) GetOuterUserId() string {
  return p.OuterUserId
}

func (p *MpUser) GetNickname() string {
  return p.Nickname
}

func (p *MpUser) GetAvatarUrl() string {
  return p.AvatarUrl
}

func (p *MpUser) GetGender() enums.GenderCode {
  return p.Gender
}

func (p *MpUser) GetCountry() string {
  return p.Country
}

func (p *MpUser) GetProvince() string {
  return p.Province
}

func (p *MpUser) GetCity() string {
  return p.City
}

func (p *MpUser) GetCustomNickname() string {
  return p.CustomNickname
}

func (p *MpUser) GetCustomAvatarUrl() string {
  return p.CustomAvatarUrl
}

func (p *MpUser) GetType() UserTypeCode {
  return p.Type
}

func (p *MpUser) GetReferrerCode() string {
  return p.ReferrerCode
}

func (p *MpUser) GetInviteCode() string {
  return p.InviteCode
}

func (p *MpUser) GetIsNew() bool {
  return p.IsNew
}

func (p *MpUser) GetIsAuth() bool {
  return p.IsAuth
}

func (p *MpUser) GetIsFirstAuth() bool {
  return p.IsFirstAuth
}

func (p *MpUser) GetSource() UserSourceCode {
  return p.Source
}

func (p *MpUser) GetStatus() enums.InfoStatus {
  return p.Status
}

func (p *MpUser) GetCreatedAt() int64 {
  return p.CreatedAt
}

func (p *MpUser) GetUpdatedAt() int64 {
  return p.UpdatedAt
}
func (p *MpUser) IsSetMedia() bool {
  return p.Media != nil
}

func (p *MpUser) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField39(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField41(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField42(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MpUser)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *MpUser)  ReadField2(iprot thrift.TProtocol) error {
  p.Media = &Media{}
  if err := p.Media.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Media), err)
  }
  return nil
}

func (p *MpUser)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WxOpenid = v
}
  return nil
}

func (p *MpUser)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OuterUserId = v
}
  return nil
}

func (p *MpUser)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Nickname = v
}
  return nil
}

func (p *MpUser)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AvatarUrl = v
}
  return nil
}

func (p *MpUser)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := enums.GenderCode(v)
  p.Gender = temp
}
  return nil
}

func (p *MpUser)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *MpUser)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Province = v
}
  return nil
}

func (p *MpUser)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.City = v
}
  return nil
}

func (p *MpUser)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CustomNickname = v
}
  return nil
}

func (p *MpUser)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.CustomAvatarUrl = v
}
  return nil
}

func (p *MpUser)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  temp := UserTypeCode(v)
  p.Type = temp
}
  return nil
}

func (p *MpUser)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.ReferrerCode = v
}
  return nil
}

func (p *MpUser)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.InviteCode = v
}
  return nil
}

func (p *MpUser)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.IsNew = v
}
  return nil
}

func (p *MpUser)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.IsAuth = v
}
  return nil
}

func (p *MpUser)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.IsFirstAuth = v
}
  return nil
}

func (p *MpUser)  ReadField39(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  temp := UserSourceCode(v)
  p.Source = temp
}
  return nil
}

func (p *MpUser)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  temp := enums.InfoStatus(v)
  p.Status = temp
}
  return nil
}

func (p *MpUser)  ReadField41(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *MpUser)  ReadField42(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *MpUser) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MpUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField39(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
    if err := p.writeField42(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MpUser) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MpUser) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:media: ", p), err) }
  if err := p.Media.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Media), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:media: ", p), err) }
  return err
}

func (p *MpUser) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wx_openid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wx_openid: ", p), err) }
  if err := oprot.WriteString(string(p.WxOpenid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wx_openid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wx_openid: ", p), err) }
  return err
}

func (p *MpUser) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outer_user_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outer_user_id: ", p), err) }
  if err := oprot.WriteString(string(p.OuterUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outer_user_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outer_user_id: ", p), err) }
  return err
}

func (p *MpUser) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nickname: ", p), err) }
  if err := oprot.WriteString(string(p.Nickname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nickname (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nickname: ", p), err) }
  return err
}

func (p *MpUser) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatar_url", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:avatar_url: ", p), err) }
  if err := oprot.WriteString(string(p.AvatarUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatar_url (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:avatar_url: ", p), err) }
  return err
}

func (p *MpUser) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gender", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:gender: ", p), err) }
  if err := oprot.WriteI32(int32(p.Gender)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gender (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:gender: ", p), err) }
  return err
}

func (p *MpUser) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("country", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:country: ", p), err) }
  if err := oprot.WriteString(string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:country: ", p), err) }
  return err
}

func (p *MpUser) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("province", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:province: ", p), err) }
  if err := oprot.WriteString(string(p.Province)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.province (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:province: ", p), err) }
  return err
}

func (p *MpUser) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("city", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:city: ", p), err) }
  if err := oprot.WriteString(string(p.City)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.city (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:city: ", p), err) }
  return err
}

func (p *MpUser) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("custom_nickname", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:custom_nickname: ", p), err) }
  if err := oprot.WriteString(string(p.CustomNickname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.custom_nickname (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:custom_nickname: ", p), err) }
  return err
}

func (p *MpUser) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("custom_avatar_url", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:custom_avatar_url: ", p), err) }
  if err := oprot.WriteString(string(p.CustomAvatarUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.custom_avatar_url (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:custom_avatar_url: ", p), err) }
  return err
}

func (p *MpUser) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:type: ", p), err) }
  return err
}

func (p *MpUser) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("referrer_code", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:referrer_code: ", p), err) }
  if err := oprot.WriteString(string(p.ReferrerCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.referrer_code (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:referrer_code: ", p), err) }
  return err
}

func (p *MpUser) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invite_code", thrift.STRING, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:invite_code: ", p), err) }
  if err := oprot.WriteString(string(p.InviteCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invite_code (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:invite_code: ", p), err) }
  return err
}

func (p *MpUser) writeField29(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_new", thrift.BOOL, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:is_new: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsNew)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_new (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:is_new: ", p), err) }
  return err
}

func (p *MpUser) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_auth", thrift.BOOL, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:is_auth: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsAuth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_auth (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:is_auth: ", p), err) }
  return err
}

func (p *MpUser) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_first_auth", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:is_first_auth: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsFirstAuth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_first_auth (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:is_first_auth: ", p), err) }
  return err
}

func (p *MpUser) writeField39(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.I32, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:source: ", p), err) }
  if err := oprot.WriteI32(int32(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:source: ", p), err) }
  return err
}

func (p *MpUser) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:status: ", p), err) }
  return err
}

func (p *MpUser) writeField41(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.I64, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:created_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:created_at: ", p), err) }
  return err
}

func (p *MpUser) writeField42(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.I64, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:updated_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:updated_at: ", p), err) }
  return err
}

func (p *MpUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MpUser(%+v)", *p)
}

// Attributes:
//  - Id: 地址id *
//  - UserId: 用户ID *
//  - MediaId: 小程序ID，只读 *
//  - UnionId: 用户的UnionId，只读 *
//  - Name: 收货人名称 *
//  - Mobile: 收货人手机号 *
//  - RegionId: 收货人地域id *
//  - Address: 收货人详细地址 *
//  - IsDefault: 是否默认地址 *
//  - Status: 状态，只读 *
//  - CreatedAt: 创建时间，只读 *
//  - UpdatedAt: 修改时间，只读 *
type MpUserAddress struct {
  Id int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  MediaId int32 `thrift:"media_id,3" db:"media_id" json:"media_id"`
  UnionId int32 `thrift:"union_id,4" db:"union_id" json:"union_id"`
  Name string `thrift:"name,5" db:"name" json:"name"`
  Mobile string `thrift:"mobile,6" db:"mobile" json:"mobile"`
  RegionId int64 `thrift:"region_id,7" db:"region_id" json:"region_id"`
  Address string `thrift:"address,8" db:"address" json:"address"`
  IsDefault bool `thrift:"is_default,9" db:"is_default" json:"is_default"`
  // unused fields # 10 to 19
  Status enums.InfoStatus `thrift:"status,20" db:"status" json:"status"`
  CreatedAt int64 `thrift:"created_at,21" db:"created_at" json:"created_at"`
  UpdatedAt int64 `thrift:"updated_at,22" db:"updated_at" json:"updated_at"`
}

func NewMpUserAddress() *MpUserAddress {
  return &MpUserAddress{}
}


func (p *MpUserAddress) GetId() int32 {
  return p.Id
}

func (p *MpUserAddress) GetUserId() int32 {
  return p.UserId
}

func (p *MpUserAddress) GetMediaId() int32 {
  return p.MediaId
}

func (p *MpUserAddress) GetUnionId() int32 {
  return p.UnionId
}

func (p *MpUserAddress) GetName() string {
  return p.Name
}

func (p *MpUserAddress) GetMobile() string {
  return p.Mobile
}

func (p *MpUserAddress) GetRegionId() int64 {
  return p.RegionId
}

func (p *MpUserAddress) GetAddress() string {
  return p.Address
}

func (p *MpUserAddress) GetIsDefault() bool {
  return p.IsDefault
}

func (p *MpUserAddress) GetStatus() enums.InfoStatus {
  return p.Status
}

func (p *MpUserAddress) GetCreatedAt() int64 {
  return p.CreatedAt
}

func (p *MpUserAddress) GetUpdatedAt() int64 {
  return p.UpdatedAt
}
func (p *MpUserAddress) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MpUserAddress)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *MpUserAddress)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *MpUserAddress)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MediaId = v
}
  return nil
}

func (p *MpUserAddress)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UnionId = v
}
  return nil
}

func (p *MpUserAddress)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *MpUserAddress)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *MpUserAddress)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RegionId = v
}
  return nil
}

func (p *MpUserAddress)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *MpUserAddress)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IsDefault = v
}
  return nil
}

func (p *MpUserAddress)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := enums.InfoStatus(v)
  p.Status = temp
}
  return nil
}

func (p *MpUserAddress)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *MpUserAddress)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *MpUserAddress) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MpUserAddress"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MpUserAddress) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:media_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.MediaId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.media_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:media_id: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("union_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:union_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UnionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.union_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:union_id: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mobile: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("region_id", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:region_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.RegionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region_id (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:region_id: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:address: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_default", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:is_default: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_default (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:is_default: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:status: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:created_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:created_at: ", p), err) }
  return err
}

func (p *MpUserAddress) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:updated_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:updated_at: ", p), err) }
  return err
}

func (p *MpUserAddress) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MpUserAddress(%+v)", *p)
}

// Attributes:
//  - Id: id *
//  - UserId: 用户ID *
//  - Formid: form id *
//  - Status: 状态，只读 *
//  - CreatedAt: 创建时间，只读 *
//  - UpdatedAt: 修改时间，只读 *
type MpUserFormid struct {
  Id int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  // unused fields # 3 to 9
  Formid string `thrift:"formid,10" db:"formid" json:"formid"`
  // unused fields # 11 to 19
  Status enums.InfoStatus `thrift:"status,20" db:"status" json:"status"`
  CreatedAt int64 `thrift:"created_at,21" db:"created_at" json:"created_at"`
  UpdatedAt int64 `thrift:"updated_at,22" db:"updated_at" json:"updated_at"`
}

func NewMpUserFormid() *MpUserFormid {
  return &MpUserFormid{}
}


func (p *MpUserFormid) GetId() int32 {
  return p.Id
}

func (p *MpUserFormid) GetUserId() int32 {
  return p.UserId
}

func (p *MpUserFormid) GetFormid() string {
  return p.Formid
}

func (p *MpUserFormid) GetStatus() enums.InfoStatus {
  return p.Status
}

func (p *MpUserFormid) GetCreatedAt() int64 {
  return p.CreatedAt
}

func (p *MpUserFormid) GetUpdatedAt() int64 {
  return p.UpdatedAt
}
func (p *MpUserFormid) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MpUserFormid)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *MpUserFormid)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *MpUserFormid)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Formid = v
}
  return nil
}

func (p *MpUserFormid)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := enums.InfoStatus(v)
  p.Status = temp
}
  return nil
}

func (p *MpUserFormid)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *MpUserFormid)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *MpUserFormid) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MpUserFormid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MpUserFormid) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MpUserFormid) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *MpUserFormid) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("formid", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:formid: ", p), err) }
  if err := oprot.WriteString(string(p.Formid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.formid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:formid: ", p), err) }
  return err
}

func (p *MpUserFormid) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:status: ", p), err) }
  return err
}

func (p *MpUserFormid) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:created_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:created_at: ", p), err) }
  return err
}

func (p *MpUserFormid) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:updated_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:updated_at: ", p), err) }
  return err
}

func (p *MpUserFormid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MpUserFormid(%+v)", *p)
}

// Attributes:
//  - Id: id *
//  - UserId: 用户ID *
//  - Cost: 总支出 *
//  - Earn: 总盈利 *
//  - Balance: 账户余额 *
//  - Status: 状态，只读 *
//  - CreatedAt: 创建时间，只读 *
//  - UpdatedAt: 修改时间，只读 *
type MpUserFinance struct {
  Id int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  // unused fields # 3 to 9
  Cost int64 `thrift:"cost,10" db:"cost" json:"cost"`
  Earn int64 `thrift:"earn,11" db:"earn" json:"earn"`
  Balance int64 `thrift:"balance,12" db:"balance" json:"balance"`
  // unused fields # 13 to 19
  Status enums.InfoStatus `thrift:"status,20" db:"status" json:"status"`
  CreatedAt int64 `thrift:"created_at,21" db:"created_at" json:"created_at"`
  UpdatedAt int64 `thrift:"updated_at,22" db:"updated_at" json:"updated_at"`
}

func NewMpUserFinance() *MpUserFinance {
  return &MpUserFinance{}
}


func (p *MpUserFinance) GetId() int32 {
  return p.Id
}

func (p *MpUserFinance) GetUserId() int32 {
  return p.UserId
}

func (p *MpUserFinance) GetCost() int64 {
  return p.Cost
}

func (p *MpUserFinance) GetEarn() int64 {
  return p.Earn
}

func (p *MpUserFinance) GetBalance() int64 {
  return p.Balance
}

func (p *MpUserFinance) GetStatus() enums.InfoStatus {
  return p.Status
}

func (p *MpUserFinance) GetCreatedAt() int64 {
  return p.CreatedAt
}

func (p *MpUserFinance) GetUpdatedAt() int64 {
  return p.UpdatedAt
}
func (p *MpUserFinance) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MpUserFinance)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *MpUserFinance)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *MpUserFinance)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Cost = v
}
  return nil
}

func (p *MpUserFinance)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Earn = v
}
  return nil
}

func (p *MpUserFinance)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Balance = v
}
  return nil
}

func (p *MpUserFinance)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := enums.InfoStatus(v)
  p.Status = temp
}
  return nil
}

func (p *MpUserFinance)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *MpUserFinance)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *MpUserFinance) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MpUserFinance"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MpUserFinance) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MpUserFinance) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *MpUserFinance) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cost", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:cost: ", p), err) }
  if err := oprot.WriteI64(int64(p.Cost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cost (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:cost: ", p), err) }
  return err
}

func (p *MpUserFinance) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("earn", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:earn: ", p), err) }
  if err := oprot.WriteI64(int64(p.Earn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.earn (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:earn: ", p), err) }
  return err
}

func (p *MpUserFinance) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("balance", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:balance: ", p), err) }
  if err := oprot.WriteI64(int64(p.Balance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.balance (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:balance: ", p), err) }
  return err
}

func (p *MpUserFinance) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:status: ", p), err) }
  return err
}

func (p *MpUserFinance) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:created_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:created_at: ", p), err) }
  return err
}

func (p *MpUserFinance) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:updated_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:updated_at: ", p), err) }
  return err
}

func (p *MpUserFinance) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MpUserFinance(%+v)", *p)
}

